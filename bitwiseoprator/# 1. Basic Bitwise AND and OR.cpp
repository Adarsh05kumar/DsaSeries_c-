// # 1. Basic Bitwise AND and OR:


// 1.
//  => int a = 5 & 3 | 2;
//  => int a = 0101 & 001 |2;
//  => int a= 0001 | 2;
//  => a=0001|0010;
//  => a=1|2;
//   => a=3;


// 2.

// => int b = 6 ^ 4 | 3;
// => b=110^100|3;
// => b= 2|3;
// => b= 10|11;
// => b=3;

// 3.

// => int c = (2 + 3) << 1;
// =>   c=5 << 1; 
// =>   c=2;


// 4.  
// => int d = 16 >> (4 - 2);
// => d= 16>>2
// => d=8/2;
//  => d=4


// 5.

// => int e = ~5 + 1;
// => e=  -(a+1)+1;
// => e = -(5+1)+1;
// => e =-6+1;
// => e -5;

// 6.
// => int f = (10 & 7) ^ (3 | 1);
// => f=2^1;
// => f=1;

// 7.
// =>int g = (15 >> 2) & 3;
// => g= (15>>2) & 3;
// => g= (7/2) & 3;
// => g=  3 & 3; 
// => g=3;


// 8. 

// => int h = (8 << 1) | ((3 & 2) ^ 1);
// => h= 16|2^1;
// => h=16|3;
// => h=19;


// 9. 
// => int i = 7 | (5 & (3 << 1));
// => i= 7|(5&6);
// => i=7|4;
// => i=7;

// 10. 

//  => int j = ~10 & 7;
//  => j= -(a+1)&7;
//  => j= -11 & 7;
//  => j=3;

// 11. 

// => int k = (4 ^ 2) << 1;
// => k=6<<1
// => k=6*2;
// =>k= 12;


// 12. 

// => int l = ((3 << 2) & 12) | (5 ^ 2);
// => l=((12)&12|(5^2);
// => l=12|7
// => l=15;

// 13. 

// => int m = 5 & 3 * 2;
// => m=1*2;
// => m=2;

// 14. 

// => int n = (6 ^ 4) | (2 & 1);
// => n=2|0;
// => n=2;

// 15. 

// => int o = (16 % 3) << 2;
// => o=1<<2;
// => o=4;

// 16. 

// => int p = ~(-5) & 7;
// => p=6&7;
// => p= 6;


// 17.  

// => int q = (5 > 2) & (3 < 4);

// => g= 1&1;
// => g= 1;


// 18. 

// => int r = (8 ^ 2) >> 1;
// => r=1000^01 >> 1;
// => r=9>>1;
// => r=4;


// 19.  

// => int t = 8 & 3 | 5 ^ 2;
// => t=0|4;
// => t=4;

// 20.   

// => int s = (16 >> 2) << 1;
// => int s=( 4)<<1;
// => int s=8;

